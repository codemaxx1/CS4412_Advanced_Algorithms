//////////////////////////////////////main

//created by Nicholas

#include <iostream>
#include <fstream>

#include "Person.h"
#include "BPlusTree.h"


int main(int argc, char** argv) {

	/*	*** new person ***	*/	
	printf("new person:\n");
	Person *person = new Person("John", "baker", 1086894, "Info Requested", "info Requested", "Abbeville", "LA");
	person->printData();
	
	
	/* *** read contents of the file *** */
	/*
	ifstream file;
    string str;
   char fname[100] = "personRelation.csv";
   file.open(fname);
   if (!file)
   {
      cout << "Error Occurred while opening file!";
      exit(0);
   }
   cout << "\n";
   while(getline(file, str))
    { //read data from file object and put it into string.
         cout << str << "\n"; //print the data of the string
	}
      
   while (file.eof() == 0)
   {
      file >> str;
      cout << str << " \n";
      
	  if(str == "\n")
   		cout << " ";
   }
   file.close();
   */
   
	
	/* *** build b+ tree *** */
	printf("\nStarting test of BPlusTree\n");
	int m = 5;
	BPlusTree *bPlusTree = new BPlusTree();
	
	// test the b+tree
	bPlusTree->test();
	
	return 0;
}



////////////////////////////////////// Person.h
//created by Nicholas

#ifndef PERSON_H
#define PERSON_H

#include <String.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>

using namespace std;


class Person
{
	//variables for this instance
	private:
		char * 	firstName;
		char * 	lastName;
		int 	ID;
		char * 	employer;
		char * 	occupancy;
		char * 	city;
		char * 	state;
		
	public:
		Person();
		
		~Person();
			
		
		// Person
		//
		/*
			input: first name (char*), last name (char*), ID (int), employer (char*), Occupancy (char*), city (char*), state (char*) 
		*/
		Person(char * inputFirstName, char * inputLastName, int inputID, char * inputEmployer, char * inputOccupancy, char * inputCity, char * inputState)
		{
			firstName 	= inputFirstName;
			lastName 	= inputLastName;
			ID 			= inputID;
			employer 	= inputEmployer;
			occupancy 	= inputOccupancy;
			city 		= inputCity;
			state	 	= inputState;			
		}
		
		
		// printData
		// print the variable data for this instance of Person
		/*
		*/
		void printData()
		{
			cout << "First Name:\t" << firstName << "\n" <<
					"Last Name:\t" << lastName << "\n" <<	
					"ID:\t" << ID << "\n" <<	
					"Employer\t" << employer << "\n" <<	
					"Occupancy:\t" << occupancy << "\n" <<
					"City:\t" << city << "\n" <<		
					"State:\t" << state << "\n";
		}
	
};

#endif


//////////////////////////////////////////////Error.h
// created by Nicholas Garrett

#ifndef ERROR_H
#define ERROR_H

#include <String.h>
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <iostream>

using namespace std;

class Error
{
	protected:
		char* errorList;

	public:
		Error();
		~Error();
		
		//
		//
		/**/
		void newError(char* error)
		{
			printf("\n*** ERROR *** \n\t %s \n*************\n", error);
			strcat(errorList, error);
		}
		
};

#endif

////////////////////////////////BPlusTree.h
// Created by Nicholas

#ifndef BPLUSTREE_H
#define BPLUSTREE_H

#include <String.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>

#include "Error.h"

using namespace std;
#define M 5

// BPlusTree
/*
	Implement a B+ tree 
*/
class BPlusTree
{
	private:	
		
		// leafNode
		// struct for a leaf node
		/*
		*/
		struct Node 
		{
			// the numbers actually stored there
		   int keys[M] = {-1};
		   
		   // array of child node pointers
		   struct Node *childPointers[M];
		   
		   bool leaf;
		   
		   // keys that have been filled
		   int filledValues;
		   
		   // pointer to parent
		   Node * parent;
		};
				
		
	public:
		
		BPlusTree();
		
		~BPlusTree();
	                   
		
		// nodes 
		struct Node *currentNode;
		struct Node *childNode;
		struct Node *root = NULL;
		
		
		
		// printNode
		// print the contents of a select node
		/*
		*/
		void printNode(Node *node)
		{
			// print the node kesy
			cout << "\n\t---keys:\t";
			for( int i = 0; i <=M; i++)
			{
				cout << node -> keys[i] << "_";
			}
			cout << "\t---\n";
			
			
		}
			
			
			
		// createNewNode
		// create a new subtree
		/*
			input:	keys (int[5]), the actual things stored in this node
					childPointers (Node **), pointers to the children of this node
					leaf: (bool) value to determine if this node is a leaf or not
					filledValues: (int), variable to store how many values have been filled in this node
					parent: (Node * ), pointer to the parent of this node
			output: newNode (struct Node)
		*/
		Node* createNewNode( int keys[M], struct Node **childPointers, bool leaf, int filledValues, struct Node * parent  )
		{
			struct Node *newNode;

			// build the node depending on if it is a leaf or not
			if( leaf == true ) 	newNode->leaf = true;
			else			  	newNode->leaf = false;
	        

			newNode->filledValues = filledValues;

		
	        newNode->parent = parent;
		    // populate the child nodes with nulls
		    for (int i = 0; i < M+1; i++) 
			{
				cout << "initializing child pointers to null, child " << i << "\n";
		    	newNode -> childPointers[i] = NULL;
		    }
		    
		    return newNode;
		}
		
		
		
		// split
		// split the current node in two
		/*
		*/
		void split(Node *currentNode)
		{
			// Error class instance for error loggign
			Error *error;
			
			/* to split the current node, split the record into 2 new minimum records.  Take the middle value of the overflowed leaf node and duplicate itin the parent non-leaf node.  
			The duplicate key and record of this key should be placed in a new left to right of the key in parent non-leaf node. */
			
			//if the current node is the root, set its value as the middle of its values and split
			if(currentNode == root)
			{

				int keysBuffer[M];

				
				// load keys from the current node into a buffer and wipe the current node's keys 
				for(int i = 0; i < M; i++)
				{
					keysBuffer[i] = currentNode->keys[i];
					currentNode->keys[i] = {-1}; 
				}
				
				// test printing the keysBuffer
				cout << "buffer: ";
				for(int i = 0; i < M; i++)
				cout << keysBuffer[i] << " ";
				cout << "\n";
				
				// the middle value of the keys of node, which will be the single key in the root
				int nodeMiddleValue = keysBuffer[M/2];
				currentNode->keys[0] = nodeMiddleValue;
					
				// test that there only exists a single non-"empty" element in the keys array
				for(int i = 1; i < M; i++)
				{
					if(currentNode->keys[i] != -1)
						error->newError("This is writing terms into the root node when it is split.  However, it seems that something has gone wrong and more than a single key is written into the root when it is split.");
				}
				
				
				cout << "node middle value: " << nodeMiddleValue << "\n";
				
				printNode(currentNode);
				
				// create new nodes for above and below the halfway value
				int minNodeKeys[M] = {-1}; 
				int maxNodeKeys[M] = {-1}; 
				
				cout <<"create leaf nodes\n";

				struct Node *minLeaf = createNewNode(minNodeKeys, NULL, true, (M/2), currentNode);
				struct Node *maxLeaf = createNewNode(maxNodeKeys, NULL, true, M - (M/2), currentNode);
				error->newError("This is where you got to last");

			}

			// if the current node is not the root
			else 
			{
				//remove this error call when you star to work on this
				error->newError("the current node is supposed to be root, but currentNode == root is false");			
			}			
			
			
			//if the current node is not the root, add its middle key to the parent and split
		}
		
		
		
		// insert
		// insert a new term into the B+ tree
		/*
		*/
		void insert(int key) 
		{
			// create instance of the Error class (for error logging and testing)
			Error *error;

			cout << "\ninserting key: " << key << "\n";
			
			
			// if there is a root
			if(root){
			
				error->newError("this code is not ready yet (unfinished)");
				printNode(currentNode);

				/* there is room in the leaf for a new key */
				// just insert the key
				if(currentNode->filledValues < M) 
				{
					
					cout << "\t\tfilledValue:" << currentNode->filledValues << "<M:" << M << "\tadding: "<< key <<"\n";
					

					// sort new inserts
					int i;
					for( i = 0; i <= currentNode->filledValues ; i++)
					{
						cout << "filledvalues: " << currentNode->filledValues << "\n";
							
						if( i == currentNode->filledValues)
						{
							currentNode->keys[i] = key;
						}
						
						
						int tempNodeKey = currentNode->keys[i];
						currentNode->keys[i] = min(tempNodeKey, key);
						key = max(tempNodeKey, key);
					
						
						cout << "\t\t\t key:" << key <<"\ttempNodeKey: " << tempNodeKey << "\ti:" << i << "\n";						
						
					}

  					// increment the number of values in this node
					currentNode->filledValues++;				

					printNode(currentNode);
				}			
	
	
				/* if both beighbors are full (or don't exist) */
				// split the record into 2 new minimum records.  Take the 
				else if(false)
				{
					//
					if( currentNode->filledValues == M && currentNode->leaf == true /*both neighbors are full*/  )
					{
						error->newError("both neighbors are full or don't exist'");
					}
				}
				
				else
				{
					error->newError("... this code is running... and it shouldn't'");
				}
				
	
			}
			
			
			// if the root node has not yet been defined
			else if(! root)
			{
				// simple testing check	
				if(key == 41) error->newError("key 41 is entered into root node, even though it shouldn't'");
				
				cout << "working with root node\n";
				/* there is room in the leaf for a new key */
				// just insert the key
				if(currentNode->filledValues < M) 
				{
					
					cout << "\t\tfilledValue:" << currentNode->filledValues << "<M:" << M << "\tadding: "<< key <<"\n";
					

					// sort new inserts
					int i;
					for( i = 0; i <= currentNode->filledValues ; i++)
					{
						cout << "filledvalues: " << currentNode->filledValues << "\n";
							
						if( i == currentNode->filledValues)
						{
							currentNode->keys[i] = key;
						}
						
						
						int tempNodeKey = currentNode->keys[i];
						currentNode->keys[i] = min(tempNodeKey, key);
						key = max(tempNodeKey, key);
					
						
						cout << "\t\t\t key:" << key <<"\ttempNodeKey: " << tempNodeKey << "\ti:" << i << "\n";						
						
					}

  					// increment the number of values in this node
					currentNode->filledValues++;				

					printNode(currentNode);
				}
				
				// error check if there are too many keys filled
				else error->newError("on root node, we are running root-node code when there are >= m keys in node");
				
				
				// if the root node has all its available keys filled, set it as the root and continue
				if(currentNode->filledValues == M)
				{
					root = currentNode;
					cout << "\n\nSplit the node\n";
					split(currentNode);
				}
				
				
			}
			
			
			// if the root is not true or false (something bad happened)
			else error->newError("the root is both true and false");
				

			   
		}
		
		
		
		void test()
		{

			int t[6] = {1,12,5,7,12,41};
		   	
			for(int i = 0; i < 6; i++) {
		    	cout<< "insert element " << t[i] << " into B+ tree\n"; 
		      	insert(t[i]);
		   	}
		   	
			cout<<"traversal of constructed B tree\n";
			
			//TODO traverse
		   	//traverse(r);
		}
		
};

#endif

///////////////////////////////////////////////exmple
// CPP program to implement B* tree
#include <bits/stdc++.h>	
using namespace std;
  
// This can be changed to any value - 
// it is the order of the B* Tree
#define N 4 
  
struct node {
  
    // key of N-1 nodes
    int key[N - 1];
      
    // Child array of 'N' length
    struct node* child[N];
      
    // To state whether a leaf or not; if node 
    // is a leaf, isleaf=1 else isleaf=0
    int isleaf;
      
    // Counts the number of filled keys in a node
    int n;
      
    // Keeps track of the parent node
    struct node* parent;
};
  
// This function searches for the leaf 
// into which to insert element 'k'
struct node* searchforleaf(struct node* root, int k, 
                     struct node* parent, int chindex)
{
    if (root) {
  
        // If the passed root is a leaf node, then
        // k can be inserted in this node itself
        if (root->isleaf == 1)
            return root;
              
        // If the passed root is not a leaf node, 
        // implying there are one or more children
        else {
            int i;
              
          /*If passed root's initial key is itself g
            reater than the element to be inserted,
            we need to insert to a new leaf left of the root*/
            if (k < root->key[0])
                root = searchforleaf(root->child[0], k, root, 0);
                  
            else 
            {
                // Find the first key whose value is greater 
                // than the insertion value
                // and insert into child of that key
                for (i = 0; i < root->n; i++)
                    if (root->key[i] > k)
                        root = searchforleaf(root->child[i], k, root, i);
                          
                // If all the keys are less than the insertion 
                // key value, insert to the right of last key
                if (root->key[i - 1] < k)
                    root = searchforleaf(root->child[i], k, root, i);
            }
        }
    }
    else {
          
        // If the passed root is NULL (there is no such 
        // child node to search), then create a new leaf 
        // node in that location
        struct node* newleaf = new struct node;
        newleaf->isleaf = 1;
        newleaf->n = 0;
        parent->child[chindex] = newleaf;
        newleaf->parent = parent;
        return newleaf;
    }
}
  
struct node* insert(struct node* root, int k)
{
    if (root) {
        struct node* p = searchforleaf(root, k, NULL, 0);
        struct node* q = NULL;
        int e = k;
          
        // If the leaf node is empty, simply 
        // add the element and return
        for (int e = k; p; p = p->parent) { 
            if (p->n == 0) {
                p->key[0] = e;
                p->n = 1;
                return root;
            }
            // If number of filled keys is less than maximum
            if (p->n < N - 1) {
               
			    int i;
                for (i = 0; i < p->n; i++) {
                    if (p->key[i] > e) {
                        for (int j = p->n - 1; j >= i; j--)
                            p->key[j + 1] = p->key[j];
                        break;
                    }
                }
                p->key[i] = e;
                p->n = p->n + 1;
                return root;
            }
              
            // If number of filled keys is equal to maximum 
            // and it's not root and there is space in the parent
            if (p->n == N - 1 && p->parent && p->parent->n < N) {
                int m;
                for (int i = 0; i < p->parent->n; i++)
                    if (p->parent->child[i] == p) {
                        m = i;
                        break;
                    }
                      
                // If right sibling is possible
                if (m + 1 <= N - 1) 
                {
                    // q is the right sibling
                    q = p->parent->child[m + 1];
                      
                    if (q) {
                          
                        // If right sibling is full
                        if (q->n == N - 1) {
                            struct node* r = new struct node;
                            int* z = new int[((2 * N) / 3)];
                            int parent1, parent2;
                            int* marray = new int[2 * N];
                            int i;
                            for (i = 0; i < p->n; i++)
                                marray[i] = p->key[i];
                            int fege = i;
                            marray[i] = e;
                            marray[i + 1] = p->parent->key[m];
                            for (int j = i + 2; j < ((i + 2) + (q->n)); j++)
                                marray[j] = q->key[j - (i + 2)];
                                  
                            // marray=bubblesort(marray, 2*N)
                            // a more rigorous implementation will 
                            // sort these elements
  
                            // Put first (2*N-2)/3 elements into keys of p
                            for (int i = 0; i < (2 * N - 2) / 3; i++)
                                p->key[i] = marray[i];
                            parent1 = marray[(2 * N - 2) / 3];
  
                            // Put next (2*N-1)/3 elements into keys of q
                            for (int j = ((2 * N - 2) / 3) + 1; j < (4 * N) / 3; j++)
                                q->key[j - ((2 * N - 2) / 3 + 1)] = marray[j];
                            parent2 = marray[(4 * N) / 3];
  
                            // Put last (2*N)/3 elements into keys of r
                            for (int f = ((4 * N) / 3 + 1); f < 2 * N; f++)
                                r->key[f - ((4 * N) / 3 + 1)] = marray[f];
  
                            // Because m=0 and m=1 are children of the same key,
                            // a special case is made for them
                            if (m == 0 || m == 1) {
                                p->parent->key[0] = parent1;
                                p->parent->key[1] = parent2;
                                p->parent->child[0] = p;
                                p->parent->child[1] = q;
                                p->parent->child[2] = r;
                                return root;
                            }
  
                            else {
                                p->parent->key[m - 1] = parent1;
                                p->parent->key[m] = parent2;
                                p->parent->child[m - 1] = p;
                                p->parent->child[m] = q;
                                p->parent->child[m + 1] = r;
                                return root;
                            }
                        }
                    }
                    else // If right sibling is not full
                    {
                        int put;
                        if (m == 0 || m == 1)
                            put = p->parent->key[0];
                        else
                            put = p->parent->key[m - 1];
                        for (int j = (q->n) - 1; j >= 1; j--)
                            q->key[j + 1] = q->key[j];
                        q->key[0] = put;
                        p->parent->key[m == 0 ? m : m - 1] = p->key[p->n - 1];
                    }
                }
            }
        }
  
        /*Cases of root splitting, etc. are omitted 
         as this implementation is just to demonstrate 
         the two-three split operation*/
    }
    else 
    {
        // Create new node if root is NULL
        struct node* root = new struct node;
        root->key[0] = k;
        root->isleaf = 1;
        root->n = 1;
        root->parent = NULL;
    }
}
  
// Driver code
int main()
{
    /* Consider the following tree that has been obtained 
       from some root split:
                6             
                / \             
            1 2 4 7 8 9
                  
            We wish to add 5. This makes the B*-tree:
                4 7             
                / \ \         
            1 2 5 6 8 9 
              
        Contrast this with the equivalent B-tree, in which
        some nodes are less than half full
              
            4 6 
            / \ \
            1 2 5 7 8 9
              
            */
  
    // Start with an empty root
    struct node* root = NULL;
    // Insert 6
    root = insert(root, 6);
      
    // Insert 1, 2, 4 to the left of 6
    root->child[0] = insert(root->child[0], 1);
    root->child[0] = insert(root->child[0], 2);
    root->child[0] = insert(root->child[0], 4);
    root->child[0]->parent = root;
      
      
    // Insert 7, 8, 9 to the right of 6
    root->child[1] = insert(root->child[1], 7);
    root->child[1] = insert(root->child[1], 8);
    root->child[1] = insert(root->child[1], 9);
    root->child[1]->parent = root;
      
      
    cout << "Original tree: " << endl;
    for (int i = 0; i < root->n; i++)
        cout << root->key[i] << " ";
    cout << endl;
    for (int i = 0; i < 2; i++) {
        cout << root->child[i]->key[0] << " ";
        cout << root->child[i]->key[1] << " ";
        cout << root->child[i]->key[2] << " ";
    }
    cout << endl;
      
      
    cout << "After adding 5: " << endl;
  
    // Inserting element '5':
  
    root->child[0] = insert(root->child[0], 5);
  
    // Printing nodes
  
    for (int i = 0; i <= root->n; i++)
        cout << root->key[i] << " ";
    cout << endl;
    for (int i = 0; i < N - 1; i++) {
        cout << root->child[i]->key[0] << " ";
        cout << root->child[i]->key[1] << " ";
    }
      
    return 0;
}